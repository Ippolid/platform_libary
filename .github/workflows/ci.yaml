name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/ippolid"
  IMAGE_NAME_SERVER: "server"
  IMAGE_NAME_MIGRATOR: "migration"
  CONTAINER_NAME: "server-container"
  PG_CONTAINER_NAME: "pg-local"
  PG_VOLUME_NAME: "postgres_volume_local"
  PG_DB: "auth"
  PG_USER: "auth-user"
  PG_PASSWORD: "auth-password"
  PG_PORT: "54321"

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Images
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push \
            --tag $REGISTRY/$IMAGE_NAME_SERVER:$TAG_NAME \
            -f deploy/Dockerfile .
          docker buildx build --no-cache --push \
            --tag $REGISTRY/$IMAGE_NAME_MIGRATOR:$TAG_NAME \
            -f deploy/migration.Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME_SERVER,IMAGE_NAME_MIGRATOR,REGISTRY,GITHUB_SHA,CONTAINER_NAME,PG_CONTAINER_NAME,PG_VOLUME_NAME,PG_DB,PG_USER,PG_PASSWORD,PG_PORT
          script: |
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Авторизация в реестре
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            
            # Создаем volume и сеть (если еще не созданы)
            docker volume create $PG_VOLUME_NAME || true
            docker network create pg-network || true
            
            if [ "$(docker ps -q -f name=^$PG_CONTAINER_NAME$)" ]; then
            echo "Контейнер $PG_CONTAINER_NAME уже запущен."
            elif [ "$(docker ps -aq -f name=^$PG_CONTAINER_NAME$)" ]; then
            echo "Контейнер $PG_CONTAINER_NAME существует, запускаем его..."
            docker start $PG_CONTAINER_NAME
            else
            echo "Создаем новый контейнер $PG_CONTAINER_NAME..."
            docker run -d \
            --name $PG_CONTAINER_NAME \
            --network pg-network \
            -e POSTGRES_DB=$PG_DB \
            -e POSTGRES_USER=$PG_USER \
            -e POSTGRES_PASSWORD=$PG_PASSWORD \
            -v $PG_VOLUME_NAME:/var/lib/postgresql/data \
            -p $PG_PORT:5432 \
            postgres:14-alpine3.17
            fi
            
            # Выполнение миграций (хост базы данных — имя контейнера PostgreSQL, порт внутри сети 5432)
            docker run --rm \
            --network pg-network \
            -e DB_HOST=$PG_CONTAINER_NAME \
            -e DB_PORT=5432 \
            $REGISTRY/$IMAGE_NAME_MIGRATOR:$TAG_NAME
            
            # Принудительное удаление старого контейнера сервиса (если существует)
            docker rm -f $CONTAINER_NAME || true
            
            # Запускаем новый контейнер основного сервиса
            docker run -d \
            --network pg-network \
            -p 50051:50051 \
            --name $CONTAINER_NAME \
            -e PG_HOST=$PG_CONTAINER_NAME \
            -e PG_PORT=5432 \
            -e DB_PORT=5432 \
            -e PG_USER=$PG_USER \
            -e PG_PASSWORD=$PG_PASSWORD \
            -e PG_DATABASE_NAME=$PG_DB \
            $REGISTRY/$IMAGE_NAME_SERVER:$TAG_NAME
            
            # Отладка: Вывод логов (можно убрать, если не требуется постоянный вывод)
            echo "Логи сервера:"
            docker logs $CONTAINER_NAME
